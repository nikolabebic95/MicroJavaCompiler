package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	int printCallCount = 0;

	Logger log = Logger.getLogger(getClass());

	// Redefined methods for error reporting

    public void syntax_error(Symbol cur_token) {
        report_error("\nSyntax error: ", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("\nFatal error, parsing can't continue: ", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append(((Symbol)info).value).append(" at line ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


// Terminals

terminal INT, BOOL, CHAR;
terminal NULL;
terminal ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR;
terminal ASSIGN;
terminal INCREMENT, DECREMENT;
terminal SEPARATOR, COMMA, POINT;
terminal LEFT_BRACE, RIGHT_BRACE, LEFT_BRACKET, RIGHT_BRACKET, LEFT_PARENTHESIS, RIGHT_PARENTHESIS;
terminal PROGRAM, CLASS, EXTENDS, IF, ELSE, NEW, DO, WHILE, RETURN, BREAK, CONTINUE, PRINT, READ, VOID, CONST;
terminal Integer INT_VALUE;
terminal Character CHAR_VALUE;
terminal Boolean BOOL_VALUE;
terminal String IDENTIFIER;
terminal ERROR;

// Non terminals

non terminal Program Program;
non terminal DeclarationsList DeclarationsList;
non terminal MethodsList MethodsList;
non terminal OptionalMethodsList OptionalMethodsList;
non terminal Declaration Declaration;
non terminal ClassName ClassName;
non terminal Type Type;
non terminal ReturnType ReturnType;
non terminal Method Method;
non terminal MethodStart MethodStart;
non terminal BaseClassDeclaration BaseClassDeclaration;
non terminal ClassDeclaration ClassDeclaration;
non terminal ConstantDeclaration ConstantDeclaration;
non terminal VariableDeclaration VariableDeclaration;
non terminal LocalVariableDeclaration LocalVariableDeclaration;
non terminal FormalParametersList FormalParametersList;
non terminal FormalParametersListNonEmpty FormalParametersListNonEmpty;
non terminal LocalVariablesList LocalVariablesList;
non terminal Block Block;
non terminal ConstantsList ConstantsList;
non terminal VariablesList VariablesList;
non terminal FormalParameter FormalParameter;
non terminal Statement Statement;
non terminal ConstantDefinition ConstantDefinition;
non terminal VariableDefinition VariableDefinition;
non terminal OptionalArrayDeclaration OptionalArrayDeclaration;
non terminal Expression Expression;
non terminal Conditional Conditional;
non terminal Loop Loop;
non terminal LoopExit LoopExit;
non terminal Return Return;
non terminal BuiltInFunction BuiltInFunction;
non terminal Constant Constant;
non terminal LeftValue LeftValue;
non terminal RightValue RightValue;
non terminal Condition Condition;
non terminal PureCondition PureCondition;
non terminal OptionalElse OptionalElse;
non terminal OptionalPrintParameter OptionalPrintParameter;
non terminal LeftValueStart LeftValueStart;
non terminal OptionalIndirections OptionalIndirections;
non terminal ArithmeticExpression ArithmeticExpression;
non terminal PureArithmeticExpression PureArithmeticExpression;
non terminal LogicalExpression LogicalExpression;
non terminal Allocation Allocation;
non terminal IncrementDecrement IncrementDecrement;
non terminal ConditionTerm ConditionTerm;
non terminal OptionalConditionTerms OptionalConditionTerms;
non terminal FunctionCall FunctionCall;
non terminal Indirection Indirection;
non terminal Term Term;
non terminal OptionalTerms OptionalTerms;
non terminal OptionalArrayDefinition OptionalArrayDefinition;
non terminal ConditionFactor ConditionFactor;
non terminal OptionalConditionFactors OptionalConditionFactors;
non terminal ActualParametersList ActualParametersList;
non terminal ActualParametersListAtLeastOne ActualParametersListAtLeastOne;
non terminal Factor Factor;
non terminal OptionalFactors OptionalFactors;
non terminal AddOperator AddOperator;
non terminal ConditionFactorToken ConditionFactorToken;
non terminal OptionalConditionFactorTokens OptionalConditionFactorTokens;
non terminal ActualParameter ActualParameter;
non terminal OptionalActualParameters OptionalActualParameters;
non terminal MultiplyOperator MultiplyOperator;
non terminal RelationalOperator RelationalOperator;

// Precedences:
precedence left ELSE;

// Productions:

Program ::= PROGRAM IDENTIFIER:I1 DeclarationsList:D2 LEFT_BRACE MethodsList:M3 RIGHT_BRACE {: RESULT=new ProgramDerived1(I1, D2, M3); RESULT.setLine(I1left); :} ;

DeclarationsList ::= DeclarationsList:D1 Declaration:D2 {: RESULT=new DeclarationsListDerived1(D1, D2); RESULT.setLine(D1left); :}
					 | {: RESULT=new DeclarationsListDerived2(); :}
					 /* epsilon */
					 ;

MethodsList ::= MethodsList:M1 Method:M2 {: RESULT=new MethodsListDerived1(M1, M2); RESULT.setLine(M1left); :}
				| {: RESULT=new MethodsListDerived2(); :}
				/* epsilon */
				;

OptionalMethodsList ::= LEFT_BRACE MethodsList:M1 RIGHT_BRACE {: RESULT=new OptionalMethodsListDerived1(M1); RESULT.setLine(M1left); :}
						| {: RESULT=new OptionalMethodsListDerived2(); :}
						/* epsilon */
						;

Declaration ::= ClassDeclaration:C1 {: RESULT=new DeclarationDerived1(C1); RESULT.setLine(C1left); :}
				|
				ConstantDeclaration:C1 {: RESULT=new DeclarationDerived2(C1); RESULT.setLine(C1left); :}
				|
				VariableDeclaration:V1 {: RESULT=new DeclarationDerived3(V1); RESULT.setLine(V1left); :}
				;

ClassName ::= IDENTIFIER:I1 {: RESULT=new ClassNameDerived1(I1); RESULT.setLine(I1left); :} ;

Type ::= INT {: RESULT=new TypeDerived1(); :}
		 |
		 BOOL {: RESULT=new TypeDerived2(); :}
		 |
		 CHAR {: RESULT=new TypeDerived3(); :}
		 |
		 ClassName:C1 {: RESULT=new TypeDerived4(C1); RESULT.setLine(C1left); :}
		 ;

ReturnType ::= VOID {: RESULT=new ReturnTypeDerived1(); :}
			   |
			   Type:T1 {: RESULT=new ReturnTypeDerived2(T1); RESULT.setLine(T1left); :}
			   ;

Method ::= MethodStart:M1 LEFT_PARENTHESIS FormalParametersList:F2 RIGHT_PARENTHESIS LocalVariablesList:L3 LEFT_BRACE Block:B4 RIGHT_BRACE {: RESULT=new MethodDerived1(M1, F2, L3, B4); RESULT.setLine(M1left); :} ;

MethodStart ::= ReturnType:R1 IDENTIFIER:I2 {: RESULT=new MethodStartDerived1(R1, I2); RESULT.setLine(R1left); :} ;

BaseClassDeclaration ::= EXTENDS ClassName:C1 {: RESULT=new BaseClassDeclarationDerived1(C1); RESULT.setLine(C1left); :}
						 | {: RESULT=new BaseClassDeclarationDerived2(); :}
						 /* epsilon */
						 ;

ClassDeclaration ::= CLASS IDENTIFIER:I1 BaseClassDeclaration:B2 LEFT_BRACE LocalVariablesList:L3 OptionalMethodsList:O4 RIGHT_BRACE {: RESULT=new ClassDeclarationDerived1(I1, B2, L3, O4); RESULT.setLine(I1left); :} ;

ConstantDeclaration ::= CONST Type:T1 ConstantsList:C2 SEPARATOR {: RESULT=new ConstantDeclarationDerived1(T1, C2); RESULT.setLine(T1left); :} ;

VariableDeclaration ::= Type:T1 VariablesList:V2 SEPARATOR {: RESULT=new VariableDeclarationDerived1(T1, V2); RESULT.setLine(T1left); :} ;

FormalParametersList ::= FormalParametersListNonEmpty:F1 {: RESULT=new FormalParametersListDerived1(F1); RESULT.setLine(F1left); :}
						 | {: RESULT=new FormalParametersListDerived2(); :}
						 /* epsilon */
						 ;

FormalParametersListNonEmpty ::= FormalParametersListNonEmpty:F1 COMMA FormalParameter:F2 {: RESULT=new FormalParametersListNonEmptyDerived1(F1, F2); RESULT.setLine(F1left); :}
								 |
								 FormalParameter:F1 {: RESULT=new FormalParametersListNonEmptyDerived2(F1); RESULT.setLine(F1left); :}
								 ;

LocalVariablesList ::= LocalVariablesList:L1 VariableDeclaration:V2 {: RESULT=new LocalVariablesListDerived1(L1, V2); RESULT.setLine(L1left); :}
					   | {: RESULT=new LocalVariablesListDerived2(); :}
					   /* epsilon */
					   ;

Block ::= Block:B1 Statement:S2 {: RESULT=new BlockDerived1(B1, S2); RESULT.setLine(B1left); :}
		  |
		  Statement:S1 {: RESULT=new BlockDerived2(S1); RESULT.setLine(S1left); :}
		  ;

ConstantsList ::= ConstantsList:C1 COMMA ConstantDefinition:C2 {: RESULT=new ConstantsListDerived1(C1, C2); RESULT.setLine(C1left); :}
				  |
				  ConstantDefinition:C1 {: RESULT=new ConstantsListDerived2(C1); RESULT.setLine(C1left); :}
				  ;

VariablesList ::= VariablesList:V1 COMMA VariableDefinition:V2 {: RESULT=new VariablesListDerived1(V1, V2); RESULT.setLine(V1left); :}
				  |
				  VariableDefinition:V1 {: RESULT=new VariablesListDerived2(V1); RESULT.setLine(V1left); :}
				  ;

FormalParameter ::= Type:T1 IDENTIFIER:I2 OptionalArrayDeclaration:O3 {: RESULT=new FormalParameterDerived1(T1, I2, O3); RESULT.setLine(T1left); :} ;

Statement ::= SEPARATOR {: RESULT=new StatementDerived1(); :}
			  |
			  Expression:E1 {: RESULT=new StatementDerived2(E1); RESULT.setLine(E1left); :}
			  |
			  LEFT_BRACE Block:B1 RIGHT_BRACE {: RESULT=new StatementDerived3(B1); RESULT.setLine(B1left); :}
			  |
			  Conditional:C1 {: RESULT=new StatementDerived4(C1); RESULT.setLine(C1left); :}
			  |
			  Loop:L1 {: RESULT=new StatementDerived5(L1); RESULT.setLine(L1left); :}
			  |
			  LoopExit:L1 {: RESULT=new StatementDerived6(L1); RESULT.setLine(L1left); :}
			  |
			  Return:R1 {: RESULT=new StatementDerived7(R1); RESULT.setLine(R1left); :}
			  |
			  BuiltInFunction:B1 {: RESULT=new StatementDerived8(B1); RESULT.setLine(B1left); :}
			  |
			  IncrementDecrement:I1 {: RESULT=new StatementDerived9(I1); RESULT.setLine(I1left); :}
			  ;

ConstantDefinition ::= IDENTIFIER:I1 ASSIGN Constant:C2 {: RESULT=new ConstantDefinitionDerived1(I1, C2); RESULT.setLine(I1left); :} ;

VariableDefinition ::= IDENTIFIER:I1 OptionalArrayDeclaration:O2 {: RESULT=new VariableDefinitionDerived1(I1, O2); RESULT.setLine(I1left); :} ;

OptionalArrayDeclaration ::= LEFT_BRACKET RIGHT_BRACKET {: RESULT=new OptionalArrayDeclarationDerived1(); :}
							 | {: RESULT=new OptionalArrayDeclarationDerived2(); :}
							 /* epsilon */
							 ;

Expression ::= LeftValue:L1 SEPARATOR {: RESULT=new ExpressionDerived1(L1); RESULT.setLine(L1left); :}
			   |
			   LeftValue:L1 ASSIGN RightValue:R2 SEPARATOR {: RESULT=new ExpressionDerived2(L1, R2); RESULT.setLine(L1left); :}
			   ;

Conditional ::= IF LEFT_PARENTHESIS Condition:C1 RIGHT_PARENTHESIS Statement:S2 OptionalElse:O3 {: RESULT=new ConditionalDerived1(C1, S2, O3); RESULT.setLine(C1left); :} ;

Loop ::= DO Statement:S1 WHILE LEFT_PARENTHESIS Condition:C2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new LoopDerived1(S1, C2); RESULT.setLine(S1left); :} ;

LoopExit ::= BREAK SEPARATOR {: RESULT=new LoopExitDerived1(); :}
			 |
			 CONTINUE SEPARATOR {: RESULT=new LoopExitDerived2(); :}
			 ;

Return ::= RETURN RightValue:R1 SEPARATOR {: RESULT=new ReturnDerived1(R1); RESULT.setLine(R1left); :}
		   |
		   RETURN SEPARATOR {: RESULT=new ReturnDerived2(); :}
		   ;

BuiltInFunction ::= READ LEFT_PARENTHESIS LeftValue:L1 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new BuiltInFunctionDerived1(L1); RESULT.setLine(L1left); :}
					|
					PRINT LEFT_PARENTHESIS RightValue:R1 OptionalPrintParameter:O2 RIGHT_PARENTHESIS SEPARATOR {: RESULT=new BuiltInFunctionDerived2(R1, O2); RESULT.setLine(R1left); :}
					;

Constant ::= INT_VALUE:I1 {: RESULT=new ConstantDerived1(I1); RESULT.setLine(I1left); :}
			 |
			 CHAR_VALUE:C1 {: RESULT=new ConstantDerived2(C1); RESULT.setLine(C1left); :}
			 |
			 BOOL_VALUE:B1 {: RESULT=new ConstantDerived3(B1); RESULT.setLine(B1left); :}
			 |
			 NULL {: RESULT=new ConstantDerived4(); :}
			 ;

LeftValue ::= LeftValueStart:L1 OptionalIndirections:O2 {: RESULT=new LeftValueDerived1(L1, O2); RESULT.setLine(L1left); :} ;

RightValue ::= ArithmeticExpression:A1 {: RESULT=new RightValueDerived1(A1); RESULT.setLine(A1left); :}
			   |
			   LogicalExpression:L1 {: RESULT=new RightValueDerived2(L1); RESULT.setLine(L1left); :}
			   |
			   Allocation:A1 {: RESULT=new RightValueDerived3(A1); RESULT.setLine(A1left); :}
			   ;

Condition ::= PureCondition:P1 {: RESULT=new ConditionDerived1(P1); RESULT.setLine(P1left); :}
			  |
			  IDENTIFIER:I1 {: RESULT=new ConditionDerived2(I1); RESULT.setLine(I1left); :}
			  |
			  BOOL_VALUE:B1 {: RESULT=new ConditionDerived3(B1); RESULT.setLine(B1left); :}
			  ;

PureCondition ::= ConditionTerm:C1 OptionalConditionTerms:O2 {: RESULT=new PureConditionDerived1(C1, O2); RESULT.setLine(C1left); :} ;

OptionalElse ::= ELSE Statement:S1 {: RESULT=new OptionalElseDerived1(S1); RESULT.setLine(S1left); :}
				 | {: RESULT=new OptionalElseDerived2(); :}
				 /* epsilon */
				 ;

OptionalPrintParameter ::= COMMA INT_VALUE:I1 {: RESULT=new OptionalPrintParameterDerived1(I1); RESULT.setLine(I1left); :}
						   | {: RESULT=new OptionalPrintParameterDerived2(); :}
						   /* epsilon */
						   ;

LeftValueStart ::= IDENTIFIER:I1 {: RESULT=new LeftValueStartDerived1(I1); RESULT.setLine(I1left); :}
				   |
				   FunctionCall:F1 {: RESULT=new LeftValueStartDerived2(F1); RESULT.setLine(F1left); :}
				   ;

OptionalIndirections ::= Indirection:I1 OptionalIndirections:O2 {: RESULT=new OptionalIndirectionsDerived1(I1, O2); RESULT.setLine(I1left); :}
						 | {: RESULT=new OptionalIndirectionsDerived2(); :}
						 /* epsilon */
						 ;

ArithmeticExpression ::= PureArithmeticExpression:P1 {: RESULT=new ArithmeticExpressionDerived1(P1); RESULT.setLine(P1left); :}
						 |
						 SUBTRACT PureArithmeticExpression:P1 {: RESULT=new ArithmeticExpressionDerived2(P1); RESULT.setLine(P1left); :}
						 ;

PureArithmeticExpression ::= Term:T1 OptionalTerms:O2 {: RESULT=new PureArithmeticExpressionDerived1(T1, O2); RESULT.setLine(T1left); :} ;

LogicalExpression ::= PureCondition:P1 {: RESULT=new LogicalExpressionDerived1(P1); RESULT.setLine(P1left); :} ;

Allocation ::= NEW Type:T1 OptionalArrayDefinition:O2 {: RESULT=new AllocationDerived1(T1, O2); RESULT.setLine(T1left); :} ;

IncrementDecrement ::= LeftValue:L1 INCREMENT {: RESULT=new IncrementDecrementDerived1(L1); RESULT.setLine(L1left); :}
					   |
					   LeftValue:L1 DECREMENT {: RESULT=new IncrementDecrementDerived2(L1); RESULT.setLine(L1left); :}
					   ;

ConditionTerm ::= ConditionFactor:C1 OptionalConditionFactors:O2 {: RESULT=new ConditionTermDerived1(C1, O2); RESULT.setLine(C1left); :} ;

OptionalConditionTerms ::= OR Condition:C1 {: RESULT=new OptionalConditionTermsDerived1(C1); RESULT.setLine(C1left); :}
						   | {: RESULT=new OptionalConditionTermsDerived2(); :}
						   /* epsilon */
						   ;

FunctionCall ::= IDENTIFIER:I1 LEFT_PARENTHESIS ActualParametersList:A2 RIGHT_PARENTHESIS {: RESULT=new FunctionCallDerived1(I1, A2); RESULT.setLine(I1left); :} ;

Indirection ::= POINT IDENTIFIER:I1 {: RESULT=new IndirectionDerived1(I1); RESULT.setLine(I1left); :}
				|
				POINT FunctionCall:F1 {: RESULT=new IndirectionDerived2(F1); RESULT.setLine(F1left); :}
				|
				LEFT_BRACKET ArithmeticExpression:A1 RIGHT_BRACKET {: RESULT=new IndirectionDerived3(A1); RESULT.setLine(A1left); :}
				;

Term ::= Factor:F1 OptionalFactors:O2 {: RESULT=new TermDerived1(F1, O2); RESULT.setLine(F1left); :} ;

OptionalTerms ::= AddOperator:A1 PureArithmeticExpression:P2 {: RESULT=new OptionalTermsDerived1(A1, P2); RESULT.setLine(A1left); :} 
				  | {: RESULT=new OptionalTermsDerived2(); :}
				  /* epsilon */
				  ;

OptionalArrayDefinition ::= LEFT_BRACKET ArithmeticExpression:A1 RIGHT_BRACKET {: RESULT=new OptionalArrayDefinitionDerived1(A1); RESULT.setLine(A1left); :}
							| {: RESULT=new OptionalArrayDefinitionDerived2(); :}
							/* epsilon */
							;

ConditionFactor ::= ConditionFactorToken:C1 RelationalOperator:R2 ConditionFactorToken:C3 OptionalConditionFactorTokens:O4 {: RESULT=new ConditionFactorDerived1(C1, R2, C3, O4); RESULT.setLine(C1left); :} ;

OptionalConditionFactors ::= AND ConditionTerm:C1 {: RESULT=new OptionalConditionFactorsDerived1(C1); RESULT.setLine(C1left); :} 
							 | {: RESULT=new OptionalConditionFactorsDerived2(); :}
							 /* epsilon */
							 ;

ActualParametersList ::= ActualParametersListAtLeastOne:A1 {: RESULT=new ActualParametersListDerived1(A1); RESULT.setLine(A1left); :}
						 | {: RESULT=new ActualParametersListDerived2(); :}
						 /* epsilon */
						 ;

ActualParametersListAtLeastOne ::= ActualParameter:A1 OptionalActualParameters:O2 {: RESULT=new ActualParametersListAtLeastOneDerived1(A1, O2); RESULT.setLine(A1left); :} ;

Factor ::= LEFT_PARENTHESIS RightValue:R1 RIGHT_PARENTHESIS {: RESULT=new FactorDerived1(R1); RESULT.setLine(R1left); :}
		   |
		   Constant:C1 {: RESULT=new FactorDerived2(C1); RESULT.setLine(C1left); :}
		   |
		   LeftValue:L1 {: RESULT=new FactorDerived3(L1); RESULT.setLine(L1left); :}
		   ;

OptionalFactors ::= MultiplyOperator:M1 Term:T2 {: RESULT=new OptionalFactorsDerived1(M1, T2); RESULT.setLine(M1left); :}
					| {: RESULT=new OptionalFactorsDerived2(); :}
					/* epsilon */
					;

AddOperator ::= ADD {: RESULT=new AddOperatorDerived1(); :}
				|
				SUBTRACT {: RESULT=new AddOperatorDerived2(); :}
				;

ConditionFactorToken ::= ArithmeticExpression:A1 {: RESULT=new ConditionFactorTokenDerived1(A1); RESULT.setLine(A1left); :} ;

OptionalConditionFactorTokens ::= RelationalOperator:R1 ConditionFactor:C2 {: RESULT=new OptionalConditionFactorTokensDerived1(R1, C2); RESULT.setLine(R1left); :} 
							  	  | {: RESULT=new OptionalConditionFactorTokensDerived2(); :}
								  /* epsilon */
								  ;

ActualParameter ::= RightValue:R1 {: RESULT=new ActualParameterDerived1(R1); RESULT.setLine(R1left); :} ;

OptionalActualParameters ::= COMMA ActualParametersListAtLeastOne:A1 {: RESULT=new OptionalActualParametersDerived1(A1); RESULT.setLine(A1left); :}
							 | {: RESULT=new OptionalActualParametersDerived2(); :}
							 /* epsilon */
							 ;

MultiplyOperator ::= MULTIPLY {: RESULT=new MultiplyOperatorDerived1(); :}
					 |
					 DIVIDE {: RESULT=new MultiplyOperatorDerived2(); :}
					 |
					 MODULO {: RESULT=new MultiplyOperatorDerived3(); :}
					 ;

RelationalOperator ::= EQUAL {: RESULT=new RelationalOperatorDerived1(); :}
					   |
					   NOT_EQUAL {: RESULT=new RelationalOperatorDerived2(); :}
					   |
					   GREATER {: RESULT=new RelationalOperatorDerived3(); :}
					   |
					   GREATER_EQUAL {: RESULT=new RelationalOperatorDerived4(); :}
					   |
					   LESS {: RESULT=new RelationalOperatorDerived5(); :}
					   |
					   LESS_EQUAL {: RESULT=new RelationalOperatorDerived6(); :}
					   ;


// non terminal Program, VarDeclList, MethodDeclList, VarDecl, Type, MethodDecl;
// non terminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList;
// non terminal StatementList, Statement, Designator, Expr, Term, Addop, Factor;
// non terminal Unmatched, Matched;
//
//
// Program ::= PROG IDENT VarDeclList LBRACE MethodDeclList RBRACE ;
//
// VarDeclList ::= VarDeclList VarDecl
// 				|
// 				/* epsilon */
// 				;
//
// VarDecl ::= Type IDENT SEMI ;
//
// Type ::= IDENT ;
//
// MethodDeclList ::= MethodDeclList MethodDecl
// 					|
// 					/* epsilon */
// 					;
//
// MethodDecl ::= Type IDENT LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE ;
//
// FormPars ::= FormalParamList | /* epsilon */ ;
//
// FormalParamList ::= FormalParamList COMMA FormalParamDecl
// 					|
// 					FormalParamDecl
// 					;
//
// FormalParamDecl ::= Type IDENT ;
//
// StatementList ::= StatementList Statement
// 					|
// 				  /* epsilon */
// 				  ;
//
// Statement ::= Matched | Unmatched ;
//
// Unmatched ::= IF Expr Statement | IF Expr Matched ELSE Unmatched;
//
//
// Matched ::= Designator EQUAL Expr SEMI
// 			  |
// 			  Designator EQUAL error SEMI
// 			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :}
// 			  |
// 			  PRINT LPAREN Expr RPAREN SEMI
// 			  {: parser.printCallCount++; :}
// 			  |
// 			  RETURN Expr SEMI
// 			  |
// 			  RETURN SEMI
// 			  |
// 			  IF Expr Matched ELSE Matched
// 			  ;
//
// Expr ::= Expr Addop Term
// 		 |
// 		 Term
// 		 ;
//
// Term ::= Factor ;
//
// Factor ::= NUMBER
// 			|
// 		   Designator
// 		    |
// 		   Designator LPAREN ActualPars RPAREN
// 		   ;
//
// ActualPars ::= ActualParamList
// 				|
// 			   /* epsilon */
// 			   ;
//
// ActualParamList ::= ActualParamList COMMA Expr
// 					|
// 					Expr
// 					;
//
// Designator ::= IDENT ;
//
// Addop ::= PLUS ;
//
